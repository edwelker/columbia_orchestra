from django.db.models.fields.files import ImageField, ImageFieldFile
from PIL import Image
import os

def _add_thumb(s):
    """
    Modifies a string to insert .thumb before the file extension
    """
    parts = s.split(".")
    parts.insert(-1, "thumb")
    if parts[-1].lower() not in ['jpeg', 'jpg']:
        parts[-1] = jpg
    return ".".join(parts)
	
def _add_feat(s):
    """
    Modifies a string to insert .feat before the file extension
    """
    parts = s.split(".")
    parts.insert(-1, "feat")
    if parts[-1].lower() not in ['jpeg', 'jpg']:
        parts[-1] = jpg
    return ".".join(parts)	

 
class ThumbnailImageFieldFile(ImageFieldFile):
    def _get_thumb_path(self):
        return _add_thumb(self.path)
    thumb_path = property(_get_thumb_path)
    
    def _get_thumb_url(self):
        return _add_thumb(self.url)
    thumb_url = property(_get_thumb_url)
    
    def save(self, name, content, save=True):
        super(ThumbnailImageFieldFile, self).save(name, content, save)
        img = Image.open(self.path)
        img.thumbnail(
            (self.field.thumb_width, self.field.thumb_height), 
            Image.ANTIALIAS
        )
        img2 = Image.open(self.path)
        img2.thumbnail((1140, 1140), Image.ANTIALIAS )
        img.save(self.thumb_path, 'JPEG')
        img2.save(self.path, 'JPEG')
        
        
    def delete(self, save=True):
        if os.path.exists(self.thumb_path):
            os.remove(self.thumb_path)
        super(ThumbnailImageFieldFile, self).delete(save)
        
class ThumbnailImageField(ImageField):
    attr_class = ThumbnailImageFieldFile
    
    def __init__(self, thumb_width=311, thumb_height=155, *args, **kwargs):
        self.thumb_width = thumb_width
        self.thumb_height = thumb_height
        super(ThumbnailImageField, self).__init__(*args, **kwargs)
	
class VideoThumbnailImageFieldFile(ImageFieldFile):
	def save(self, name, content, save=True):
		super(VideoThumbnailImageFieldFile, self).save(name, content, save)
		img = Image.open(self.path)
		img.thumbnail((311, 155), Image.ANTIALIAS )
		img.save(self.path, 'JPEG')
		
		
class VideoThumbnailImageField(ImageField):
	attr_class = VideoThumbnailImageFieldFile
	
#class FeaturedThumbnailImageField(ImageFieldFile):
#	def _get_feat_path(self):
#		return _add_feat(self.path)
#	feat_path = property(_get_feat_path)
#	
#	def _get_feat_url(self):
#		return _add_feat(self.url)
#	feat_url = property(_get_feat_url)
#	
#	def save(self, name, content, save=True):
#		